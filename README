#Metrikus Chessboard
Standard Chessboard application using python 

#Usage
To run the application 
```bash 
python3 main/chess_controller.py
```

This application is running on linux ubuntu 

When the application is execute, it has menu with 3 options for the user to choose:
``` bash 
Hello Chess Controller
-> Current Position:

 | a | b | c | d | e | f | g | h |
1| ♜ | ♞ | ♝ | ♛ | ♚ | ♝ | ♞ | ♜ |
2| ♟ | ♟ | ♟ | ♟ | ♟ | ♟ | ♟ | ♟ |
3|   |   |   |   |   |   |   |   |
4|   |   |   |   |   |   |   |   |
5|   |   |   |   |   |   |   |   |
6|   |   |   |   |   |   |   |   |
7| ♙ | ♙ | ♙ | ♙ | ♙ | ♙ | ♙ | ♙ |
8| ♖ | ♘ | ♗ | ♕ | ♔ | ♗ | ♘ | ♖ |

================================
m. Move pieces
p. Print current board
e. Exit
```

To move Piece, you will need to enter the name of the pieces with starting position and end position.eg:
```
Enter option:m
Enter piece notation: pawn
Enter start-square: c7
Enter end-square: c5
-> Validation: piece:pawn_2_0
-> current_pieces_name:None
-> Attempting to moving pawn_2_0
-> Current Position:

 | a | b | c | d | e | f | g | h |
1| ♜ | ♞ | ♝ | ♛ | ♚ | ♝ | ♞ | ♜ |
2| ♟ | ♟ | ♟ | ♟ | ♟ | ♟ | ♟ | ♟ |
3|   |   |   |   |   |   |   |   |
4|   |   |   |   |   |   |   |   |
5|   |   | ♙ |   |   |   |   |   |
6|   |   |   |   |   |   |   |   |
7| ♙ | ♙ |   | ♙ | ♙ | ♙ | ♙ | ♙ |
8| ♖ | ♘ | ♗ | ♕ | ♔ | ♗ | ♘ | ♖ |

================================
m. Move pieces
p. Print current board
e. Exit
Enter option:

```


To exit the application, type "e" to exit. 

The games supported:
- Taken opposite pieces
- Prevent player take turns continously. Each player taking each turn
- Making sure the pieces are allow the move based on their role. 
- Prevent current peices taken own pieces. 

================================================================================
Question Python Output:
1. 3 (Reason: set() doesn't hold duplicate items. Even though add function is calling 4 times, it will only store different object/elements and the limit is set to 3 on the constructor.)
2. {Element(id=2, name='second element'), Element(id=3, name='third element'), Element(id=1, name='first element')} (Reason: self.storage is set type. Get storage will return all elements of self.storage)
3. 3 (Reason: This is because the self.storage is an immutable object due to the frozen is being set to True for the Element class. Therefore any new elements object are not allow to add new elements)
4. {Element(id=2, name='second element'), Element(id=3, name='third element'), Element(id=1, name='first element')} (Reason: This is due to on line 19, self.get_current_count() has already exceed the limit. The self.storage is an immutable type of the dataclass. That's the reason it will still contain information from first_storage object.)

